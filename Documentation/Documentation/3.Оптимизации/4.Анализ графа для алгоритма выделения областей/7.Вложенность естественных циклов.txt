__Постановка задачи__

Построить иерархию вложенности всех естественных циклов графа

__От каких задач зависит, входные данные__

На вход алгоритму подаетсятся список циклов

~~~~~~~{.cs}
List<Cycle<T>> list
~~~~~~~~~~~~~~

Основывается на задаче определения всех естественных циклов

__Для каких задач нужна, выходные данные__

Девево циклов

~~~~~~~{.cs}
public Dictionary<Cycle<T>, List<Cycle<T>>> data { get; private set; }
~~~~~~~~~~~~~~

Корень дерева циклов

~~~~~~~{.cs}
public List<Cycle<T>> root { get; private set; }
~~~~~~~~~~~~~~

Используется алгоритмом выделения областей

__Реализация__

Шаблон типа необходим для проведения тестирования алгоритма с помощью типа int, но алгоритм предназначен для использования с типом Block

~~~~~~~{.cs}
public class AllCyclesHierarchy<T>
{
	public AllCyclesHierarchy(List<Cycle<T>> list);
	public List<Cycle<T>> root { get; private set; }
	public Dictionary<Cycle<T>, List<Cycle<T>>> data { get; private set; }
}
~~~~~~~~~~~~~~

__Описание__

- Алгоритм строит иерархию вложенности циклов
- Использует только данные о вершинах, принадлежащих циклам
- Каждый цикл присутствует в дереве только один раз
- Если цикл вложен сразу в несколько циклов, то данный цикл становиться потомком самого наиболее удалённого от корня предка
- Корень может состоять из нескольких вершин

__Тесты__

Для прогона тестов использовать сл. метод:

~~~~~~~{.cs}
AllCyclesHierarchyTesting.Test()
~~~~~~~~~~~~~~

__Команда__
Альфа