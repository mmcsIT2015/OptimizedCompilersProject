__Постановка задачи__

Вычисление Def-Use информации о переменных внутри базового блока.

__Вход__

0. Трехадресный код.
1. Задача решена с помощью метода класса Block, он должен быть создан.
2. Номер строки трехадресного кода.

__Выход__

1. Возвращает список живых переменных на данной строке
2. Проверяет, жива ли переменная на данной строке

__Описание алгоритма__

Анализ представлен тремя методами класса Block:

1. `void CalculateDefUseData()`, проходящую по всем строкам 3-х адресного кода данного блока и заполняющую внутреннюю структуру живыми переменными для каждой строки 3-х адресного кода. Метод должен вызываться перед первым вызовом `IsVariableAlive`, `GetAliveVariables`, также требуется повторный вызов, если блок был изменен.

2. `bool IsVariableAlive(string variable, int step)`, возвращает false, если переменная мертва на данном шаге, в противном случае 1.

3. `HashSet<string> GetAliveVariables(int step)`, возвращает множество живых переменных для заданного шага.

__Пример использования__

~~~~~~~{.cs}
		block.CalculateDefUseData();
		Hashset<string> alive_vars = block.GetAliveVariables(current_line);
		bool is_alive_a = block.IsVariableAlive("a", current_line);
~~~~~~~~~~~~~~~