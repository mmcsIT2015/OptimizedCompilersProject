__Постановка задачи__

Выделение базовых блоков

__От каких задач зависит, входные данные__

Класс трехадресного кода

~~~~~~~{.cs}
ThreeAddrCode threeAddrCode
~~~~~~~~~~~~~~

Алгоритм берет данные из параметра

~~~~~~~{.cs}
List<Block> blocks
~~~~~~~~~~~~~~

__Для каких задач нужна, выходные данные__

Алгоритм меняет класс 3-х адресного кода, поданного на вход.
Изменяется только свойство

~~~~~~~{.cs}
List<Block> blocks
~~~~~~~~~~~~~~

Данный алгоритм является основой практически для все аглоритмов, выполняющих оптимизации как в, так и вне базового блока.

__Реализация__

Алгоритм реализован в виде единственного статического класса с единственным статическим методом

~~~~~~~{.cs}
static class BaseBlocksPartition
{
    public static void Partition(ThreeAddrCode threeAddrCode);
}
~~~~~~~~~~~~~~

__Пример использования:__

~~~~~~~{.cs}
BaseBlocksPartition.Partition(threeAddrCode);
~~~~~~~~~~~~~~

__Описание(что делает и как реализовано)__

- Алгоритм разбивает весь код программы на отдельные базовые блоки

- Код программы подается как первый элемент свойства blocks

- На выходе blocks содержит отдельные базовые блоки в порядке их следования в основном тексте программы

- Алгоритм анализирует все строки кода на наличие команд goto

__Команда__
Альфа