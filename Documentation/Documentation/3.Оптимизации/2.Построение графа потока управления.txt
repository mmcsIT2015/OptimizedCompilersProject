__Постановка задачи__

Построить граф потока управления

__От каких задач зависит, входные данные__

На вход алгоритму подается список базовых блоков, который хранится в классе 3-х адресного кода

~~~~~~~{.cs}
IList<Block> blocks
~~~~~~~~~~~~~~

Алгоритм использует выхдные данные алгоритма разбиения на базовые блоки

__Для каких задач нужна, выходные данные__

Граф используется внутри других алгоритмов только для навигации между соседними вершинами графа потока управления

- Получить список всех блоков, в которые есть вход из блока `source`

~~~~~~~{.cs}
foreach (var block in graph.OutEdges(source)) {...}
~~~~~~~~~~~~~~

- Получить список всех блоков, из которых есть вход в блок `sink`

~~~~~~~{.cs}
foreach (var block in graph.InEdges(sink)) {...}
~~~~~~~~~~~~~~

__Реализация__

~~~~~~~{.cs}
public class ControlFlowGraph : IGraph<Block>
{
	public ControlFlowGraph(IList<Block> blocks);
	public IEnumerable<Block> OutEdges(Block block);
	public IEnumerable<Block> InEdges(Block block);
}
~~~~~~~~~~~~~~

Интерфейс IGraph<Block> необходим, т.к. является основой для написания тестовых графов потока управления для других алгоритмов.

__Пример использования:__

~~~~~~~{.cs}
var graph = new ControlFlowGraph(threeAddrCode.blocks);
foreach (var block in graph.OutEdges(threeAddrCode.blocks[0])) {}
foreach (var block in graph.InEdges(threeAddrCode.blocks[1])) {}
~~~~~~~~~~~~~~

__Описание__

- Класс хранит граф потока управления для конкретного списка базовых блоков

- Алгоритм мспользует упорядоченность блоков в списке и анализ меток в 3-х адресном коде

__Команда__
Альфа