# Анализ активных переменных

__Основная идея алгоритма__

Большое количество улучшающих преобразований зависит от информации, вычисляемой в направлении, обратном потоку управления программы.
Именно к такому типу преобразований относится анализ активных переменных.
 
Анализ активных переменных состоит в том, что для данной
переменной `x` и точки `p` мы хотим узнать, может ли значение `x` в точке `p` быть использовано вдоль некоторого, начинающегося в `p`
пути графа потока. Если да, то мы говорим, что переменная `x` `активная`, или `живая` в точке `p`; в противном случае переменная `x` 
в точке `p` `неактивна`, или `мертва`. 

Определим `IN[B]` как множество переменных, активных в точке непосредственно перед блоком `B`, а `OUT[B]` - как такое же множество в точке,
непосредственно следующей за блоком. Обозначим через `DEF[B]` множество переменных, которым в блоке `B` значения присваиваются до их 
использования, а через `USE[B]` - множество переменных, значения которых могут использоваться в B до их определения. Тогда уравнения, 
связывающее `DEF` и `USE` с неизвестными `IN` и `OUT`, выглядит следующим образом:

```
	IN[B] = USE[B]<объединение>(OUT[B] - DEF[B])
	OUT[B] = <объединение по P - непосредственным потомкам B>IN[P] 
```

Реализация включает отдельную функцию, вычисляющую множества `DEF` и `USE` для каждого блока, а также обобщенный итерационный алгоритм,
реализующий описанные уравнения и возвращающий множества `IN` и `OUT` для каждого блока трехадресного кода.

__Входные данные__

Граф потока с вычисленными для каждого блока множествами `DEF` и `USE` 

__Выходные данные__

Множества `IN` и `OUT` для каждого блока

__Пример использования__

~~~~~~~{.cs}

	ThreeAddrCode code;
	
	// ...
	
	var InOut = DataFlowAnalysis.GetActiveVariables(code);
	
	// ...

~~~~~~~~~~~~~~