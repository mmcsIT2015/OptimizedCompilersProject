__Оптимизации с использованием множеств IN/OUT для активных переменных__

Алгоритм доступен в классе `ActiveVarsOptimization`. Этот класс является наследником `DeadCodeElimination` и лишь предоставляет для каждого блока заполненный словарь `<переменная>-<живучесть>`, который используется в алгоритме `DeadCodeElimination`. Ддя оригинального алгоритма этот словарь для каждого блока - пустой, т.е. оптимизации осуществляются им только в пределах базового блока.

Учитывая же данные из анализа графа потока управления, которые можно получить с помощью итерационного алгоритма, мы может получить инофрмацию о "живучести" переменной вне текущего блока - таким образом, оптимизация будет более полной.

__Определение живучести переменной, основываясь на данных `IN`/`OUT`__

- Все переменные в левых частях выражений в последнем блоке считаются живыми. Это позволяет не удалять __все__ переменные программы, потому что они больше не используются

> Возможно, в данном случае даже нужно было считать живыми все переменные программы, а не только переменные последнего блока

- Для всех остальных базовых блоков рассматривается множество `OUT` для этого блока: все переменные, которых нет в этом множестве (`OUT`) считаются мертвыми.
