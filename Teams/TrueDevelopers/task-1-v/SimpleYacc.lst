
// ==========================================================================
//  GPPG error listing for yacc source file <SimpleYacc.y>
// ==========================================================================
//  Version:  1.3.6
//  Machine:  PVLADPC
//  DateTime: 21.09.2015 22:16:38
//  UserName: VladislavPyslaru
// ==========================================================================


%{
    public BlockNode root; // Êîðíåâîé óçåë ñèíòàêñè÷åñêîãî äåðåâà 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
%}

%output = SimpleYacc.cs

%union { 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
       }

%using ProgramTree;

%namespace SimpleParser

%token LBR RBR ASG SM DO WHL IF ELS PL MN ML DV LT GT EQ LTE GTE LPR RPR SM
%token <iVal> INUM 
%token <dVal> RNUM 
%token <sVal> ID

%type <eVal> ident expr Q S E T F
%type <stVal> statement if ifelse loop doloop
%type <blVal> stlist block

%%
// Error: NonTerminal symbol "ifelse" has no productions
// Warning: Terminating ifelse fixes the following size-1 NonTerminal set
   // {ifelse}
// Error: There are 1 non-terminating NonTerminal Symbols
   //  {ifelse}
// ----------------------------------------------------------------------

progr       : block { root = $1; }
            ;

stlist	    : statement 
              { 
                $$ = new BlockNode($1);
              }
            | stlist statement 
              { 
                $1.Add($2); 
                $$ = $1; 
              }
            ;

           
           
// STATEMENTS   
         
statement   : expr SM
            | block
            | if
            | ifelse
            | loop
            | doloop SM
            ;

block	    : LBR stlist RBR
            ;
     
if          : IF LPR expr RPR statement;
 

            
loop        : WHL LPR expr RPR statement
            ;
         
doloop      : DO statement WHL LPR expr RPR
            ;        


   
   
// EXPRESIONS           
 
ident 	    : ID { $$ = new IdNode($1); }	
            ;
 
expr        : Q;

Q           : S
            | ident ASG S //{ $$ = new ExprNode($1 as IdNode, $3); }
            ;

            
S           : E
            | S EQ E
            | S GT E
            | S LT E
            | S GTE E
            | S LTE E
            ;
            
E           : T
            | E PL T
            | E MN T
            ;
     
T           : F
            | T ML F
            | T DV F
            ;
     
F	        : ident  { $$ = $1 as IdNode; }
            | INUM { $$ = new IntNumNode($1); }
            | LPR S RPR
            ;
            
%%

// ==========================================================================

