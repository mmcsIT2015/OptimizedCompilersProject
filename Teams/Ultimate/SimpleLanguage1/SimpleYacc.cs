// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  IDEA-PC
// DateTime: 18.09.2015 19:21:11
// UserName: Michael
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,CYCLE=3,ASSIGN=4,SEMICOLON=5,PLUS=6,
    MINUS=7,DIV=8,MULT=9,LEFT_BR=10,RIGHT_BR=11,BEGIN=12,
    END=13,WHILE=14,LARGER=15,SMALLER=16,IF=17,ELSE=18,
    INUM=19,RNUM=20,ID=21};

public struct ValueType
{ 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
//			public BinaryNode binVal;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Эти объявления добавляются в класс GPPGParser, представляющий собой парсер, генерируемый системой gppg
    public BlockNode root; // Корневой узел синтаксического дерева 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[28];
  private static State[] states = new State[47];
  private static string[] nonTerms = new string[] {
      "ident", "expr", "assign", "statement", "cycle", "condition", "stlist", 
      "block", "progr", "$accept", "E", "T", "F", };

  static Parser() {
    states[0] = new State(new int[]{12,4},new int[]{-9,1,-8,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{21,20,12,4,17,36,3,43},new int[]{-7,5,-4,46,-3,9,-1,10,-8,34,-6,35,-5,42});
    states[5] = new State(new int[]{13,6,5,7});
    states[6] = new State(-26);
    states[7] = new State(new int[]{21,20,12,4,17,36,3,43},new int[]{-4,8,-3,9,-1,10,-8,34,-6,35,-5,42});
    states[8] = new State(-4);
    states[9] = new State(-5);
    states[10] = new State(new int[]{4,11});
    states[11] = new State(new int[]{21,20,19,21,10,22},new int[]{-2,12,-11,33,-12,32,-13,31,-1,19});
    states[12] = new State(new int[]{16,13,15,25,13,-13,5,-13});
    states[13] = new State(new int[]{21,20,19,21,10,22},new int[]{-11,14,-12,32,-13,31,-1,19});
    states[14] = new State(new int[]{6,15,7,27,16,-14,15,-14,13,-14,5,-14,11,-14,12,-14,21,-14,17,-14,3,-14});
    states[15] = new State(new int[]{21,20,19,21,10,22},new int[]{-12,16,-13,31,-1,19});
    states[16] = new State(new int[]{9,17,8,29,6,-18,7,-18,16,-18,15,-18,13,-18,5,-18,11,-18,12,-18,21,-18,17,-18,3,-18});
    states[17] = new State(new int[]{21,20,19,21,10,22},new int[]{-13,18,-1,19});
    states[18] = new State(-21);
    states[19] = new State(-23);
    states[20] = new State(-12);
    states[21] = new State(-24);
    states[22] = new State(new int[]{21,20,19,21,10,22},new int[]{-2,23,-11,33,-12,32,-13,31,-1,19});
    states[23] = new State(new int[]{11,24,16,13,15,25});
    states[24] = new State(-25);
    states[25] = new State(new int[]{21,20,19,21,10,22},new int[]{-11,26,-12,32,-13,31,-1,19});
    states[26] = new State(new int[]{6,15,7,27,16,-15,15,-15,13,-15,5,-15,11,-15,12,-15,21,-15,17,-15,3,-15});
    states[27] = new State(new int[]{21,20,19,21,10,22},new int[]{-12,28,-13,31,-1,19});
    states[28] = new State(new int[]{9,17,8,29,6,-19,7,-19,16,-19,15,-19,13,-19,5,-19,11,-19,12,-19,21,-19,17,-19,3,-19});
    states[29] = new State(new int[]{21,20,19,21,10,22},new int[]{-13,30,-1,19});
    states[30] = new State(-22);
    states[31] = new State(-20);
    states[32] = new State(new int[]{9,17,8,29,6,-17,7,-17,16,-17,15,-17,13,-17,5,-17,11,-17,12,-17,21,-17,17,-17,3,-17});
    states[33] = new State(new int[]{6,15,7,27,16,-16,15,-16,13,-16,5,-16,11,-16,12,-16,21,-16,17,-16,3,-16});
    states[34] = new State(-6);
    states[35] = new State(-7);
    states[36] = new State(new int[]{21,20,19,21,10,22},new int[]{-2,37,-11,33,-12,32,-13,31,-1,19});
    states[37] = new State(new int[]{16,13,15,25,12,4},new int[]{-8,38});
    states[38] = new State(new int[]{18,39,13,-9,5,-9});
    states[39] = new State(new int[]{12,4,21,20,19,21,10,22},new int[]{-8,40,-2,41,-11,33,-12,32,-13,31,-1,19});
    states[40] = new State(-10);
    states[41] = new State(new int[]{16,13,15,25,13,-11,5,-11});
    states[42] = new State(-8);
    states[43] = new State(new int[]{21,20,19,21,10,22},new int[]{-2,44,-11,33,-12,32,-13,31,-1,19});
    states[44] = new State(new int[]{16,13,15,25,21,20,12,4,17,36,3,43},new int[]{-4,45,-3,9,-1,10,-8,34,-6,35,-5,42});
    states[45] = new State(-27);
    states[46] = new State(-3);

    rules[1] = new Rule(-10, new int[]{-9,2});
    rules[2] = new Rule(-9, new int[]{-8});
    rules[3] = new Rule(-7, new int[]{-4});
    rules[4] = new Rule(-7, new int[]{-7,5,-4});
    rules[5] = new Rule(-4, new int[]{-3});
    rules[6] = new Rule(-4, new int[]{-8});
    rules[7] = new Rule(-4, new int[]{-6});
    rules[8] = new Rule(-4, new int[]{-5});
    rules[9] = new Rule(-6, new int[]{17,-2,-8});
    rules[10] = new Rule(-6, new int[]{17,-2,-8,18,-8});
    rules[11] = new Rule(-6, new int[]{17,-2,-8,18,-2});
    rules[12] = new Rule(-1, new int[]{21});
    rules[13] = new Rule(-3, new int[]{-1,4,-2});
    rules[14] = new Rule(-2, new int[]{-2,16,-11});
    rules[15] = new Rule(-2, new int[]{-2,15,-11});
    rules[16] = new Rule(-2, new int[]{-11});
    rules[17] = new Rule(-11, new int[]{-12});
    rules[18] = new Rule(-11, new int[]{-11,6,-12});
    rules[19] = new Rule(-11, new int[]{-11,7,-12});
    rules[20] = new Rule(-12, new int[]{-13});
    rules[21] = new Rule(-12, new int[]{-12,9,-13});
    rules[22] = new Rule(-12, new int[]{-12,8,-13});
    rules[23] = new Rule(-13, new int[]{-1});
    rules[24] = new Rule(-13, new int[]{19});
    rules[25] = new Rule(-13, new int[]{10,-2,11});
    rules[26] = new Rule(-8, new int[]{12,-7,13});
    rules[27] = new Rule(-5, new int[]{3,-2,-4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 3: // stlist -> statement
{ 
				CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal); 
			}
        break;
      case 4: // stlist -> stlist, SEMICOLON, statement
{ 
				ValueStack[ValueStack.Depth-3].blVal.Add(ValueStack[ValueStack.Depth-1].stVal); 
				CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-3].blVal; 
			}
        break;
      case 5: // statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 6: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 7: // statement -> condition
{CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 8: // statement -> cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 12: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 13: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 26: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 27: // cycle -> CYCLE, expr, statement
{ CurrentSemanticValue.stVal = new CycleNode(ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
