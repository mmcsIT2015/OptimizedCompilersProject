// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  ANTON-NOTEBOOK
// DateTime: 21.09.2015 19:04:19
// UserName: ?????
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,WHILE=5,DO=6,
    ASSIGN=7,SEMICOLON=8,PLUS=9,MINUS=10,MULT=11,DIV=12,
    LEFTBRACKET=13,RIGHTBRACKET=14,GREATER=15,LESS=16,EQUAL=17,NOTEQUAL=18,
    IF=19,THEN=20,ELSE=21,REPEAT=22,UNTIL=23,COMMA=24,
    INUM=25,RNUM=26,ID=27};

public struct ValueType
{ 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
			public PredicateBinaryNode prVal;
			public IfNode ifVal;
			public ProcedureNode pcVal;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Эти объявления добавляются в класс GPPGParser, представляющий собой парсер, генерируемый системой gppg
    public BlockNode root; // Корневой узел синтаксического дерева 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[33];
  private static State[] states = new State[62];
  private static string[] nonTerms = new string[] {
      "expr", "ident", "t", "f", "assign", "statement", "while", "stlist", "block", 
      "prexpr", "if", "proc", "progr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-13,1,-9,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{27,39,3,4,5,44,22,48,19,54},new int[]{-8,5,-6,61,-5,9,-2,10,-9,42,-7,43,-11,53,-12,60});
    states[5] = new State(new int[]{4,6,8,7});
    states[6] = new State(-28);
    states[7] = new State(new int[]{27,39,3,4,5,44,22,48,19,54},new int[]{-6,8,-5,9,-2,10,-9,42,-7,43,-11,53,-12,60});
    states[8] = new State(-4);
    states[9] = new State(-5);
    states[10] = new State(new int[]{7,11});
    states[11] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-1,12,-10,38,-3,29,-4,28,-2,17});
    states[12] = new State(new int[]{9,13,10,24,15,30,16,32,17,34,18,36,4,-12,8,-12,23,-12,21,-12});
    states[13] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-3,14,-4,28,-2,17});
    states[14] = new State(new int[]{11,15,12,26,9,-19,10,-19,15,-19,16,-19,17,-19,18,-19,4,-19,8,-19,23,-19,21,-19,14,-19,6,-19,20,-19});
    states[15] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-4,16,-2,17});
    states[16] = new State(-22);
    states[17] = new State(-24);
    states[18] = new State(-11);
    states[19] = new State(-25);
    states[20] = new State(-26);
    states[21] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-1,22,-3,29,-4,28,-2,17});
    states[22] = new State(new int[]{14,23,9,13,10,24});
    states[23] = new State(-27);
    states[24] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-3,25,-4,28,-2,17});
    states[25] = new State(new int[]{11,15,12,26,9,-20,10,-20,15,-20,16,-20,17,-20,18,-20,4,-20,8,-20,23,-20,21,-20,14,-20,6,-20,20,-20});
    states[26] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-4,27,-2,17});
    states[27] = new State(-23);
    states[28] = new State(-21);
    states[29] = new State(new int[]{11,15,12,26,9,-18,10,-18,15,-18,16,-18,17,-18,18,-18,4,-18,8,-18,23,-18,21,-18,14,-18,6,-18,20,-18});
    states[30] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-1,31,-3,29,-4,28,-2,17});
    states[31] = new State(new int[]{9,13,10,24,4,-14,8,-14,23,-14,21,-14,6,-14,20,-14});
    states[32] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-1,33,-3,29,-4,28,-2,17});
    states[33] = new State(new int[]{9,13,10,24,4,-15,8,-15,23,-15,21,-15,6,-15,20,-15});
    states[34] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-1,35,-3,29,-4,28,-2,17});
    states[35] = new State(new int[]{9,13,10,24,4,-16,8,-16,23,-16,21,-16,6,-16,20,-16});
    states[36] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-1,37,-3,29,-4,28,-2,17});
    states[37] = new State(new int[]{9,13,10,24,4,-17,8,-17,23,-17,21,-17,6,-17,20,-17});
    states[38] = new State(-13);
    states[39] = new State(new int[]{13,40,7,-11});
    states[40] = new State(new int[]{14,41});
    states[41] = new State(-10);
    states[42] = new State(-6);
    states[43] = new State(-7);
    states[44] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-10,45,-1,52,-3,29,-4,28,-2,17});
    states[45] = new State(new int[]{6,46});
    states[46] = new State(new int[]{27,39,3,4,5,44,22,48,19,54},new int[]{-6,47,-5,9,-2,10,-9,42,-7,43,-11,53,-12,60});
    states[47] = new State(-29);
    states[48] = new State(new int[]{27,39,3,4,5,44,22,48,19,54},new int[]{-6,49,-5,9,-2,10,-9,42,-7,43,-11,53,-12,60});
    states[49] = new State(new int[]{23,50});
    states[50] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-10,51,-1,52,-3,29,-4,28,-2,17});
    states[51] = new State(-30);
    states[52] = new State(new int[]{15,30,9,13,10,24,16,32,17,34,18,36});
    states[53] = new State(-8);
    states[54] = new State(new int[]{27,18,25,19,26,20,13,21},new int[]{-10,55,-1,52,-3,29,-4,28,-2,17});
    states[55] = new State(new int[]{20,56});
    states[56] = new State(new int[]{27,39,3,4,5,44,22,48,19,54},new int[]{-6,57,-5,9,-2,10,-9,42,-7,43,-11,53,-12,60});
    states[57] = new State(new int[]{21,58,4,-31,8,-31,23,-31});
    states[58] = new State(new int[]{27,39,3,4,5,44,22,48,19,54},new int[]{-6,59,-5,9,-2,10,-9,42,-7,43,-11,53,-12,60});
    states[59] = new State(-32);
    states[60] = new State(-9);
    states[61] = new State(-3);

    rules[1] = new Rule(-14, new int[]{-13,2});
    rules[2] = new Rule(-13, new int[]{-9});
    rules[3] = new Rule(-8, new int[]{-6});
    rules[4] = new Rule(-8, new int[]{-8,8,-6});
    rules[5] = new Rule(-6, new int[]{-5});
    rules[6] = new Rule(-6, new int[]{-9});
    rules[7] = new Rule(-6, new int[]{-7});
    rules[8] = new Rule(-6, new int[]{-11});
    rules[9] = new Rule(-6, new int[]{-12});
    rules[10] = new Rule(-12, new int[]{27,13,14});
    rules[11] = new Rule(-2, new int[]{27});
    rules[12] = new Rule(-5, new int[]{-2,7,-1});
    rules[13] = new Rule(-5, new int[]{-2,7,-10});
    rules[14] = new Rule(-10, new int[]{-1,15,-1});
    rules[15] = new Rule(-10, new int[]{-1,16,-1});
    rules[16] = new Rule(-10, new int[]{-1,17,-1});
    rules[17] = new Rule(-10, new int[]{-1,18,-1});
    rules[18] = new Rule(-1, new int[]{-3});
    rules[19] = new Rule(-1, new int[]{-1,9,-3});
    rules[20] = new Rule(-1, new int[]{-1,10,-3});
    rules[21] = new Rule(-3, new int[]{-4});
    rules[22] = new Rule(-3, new int[]{-3,11,-4});
    rules[23] = new Rule(-3, new int[]{-3,12,-4});
    rules[24] = new Rule(-4, new int[]{-2});
    rules[25] = new Rule(-4, new int[]{25});
    rules[26] = new Rule(-4, new int[]{26});
    rules[27] = new Rule(-4, new int[]{13,-1,14});
    rules[28] = new Rule(-9, new int[]{3,-8,4});
    rules[29] = new Rule(-7, new int[]{5,-10,6,-6});
    rules[30] = new Rule(-7, new int[]{22,-6,23,-10});
    rules[31] = new Rule(-11, new int[]{19,-10,20,-6});
    rules[32] = new Rule(-11, new int[]{19,-10,20,-6,21,-6});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 3: // stlist -> statement
{ 
				CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal); 
			}
        break;
      case 4: // stlist -> stlist, SEMICOLON, statement
{ 
				ValueStack[ValueStack.Depth-3].blVal.Add(ValueStack[ValueStack.Depth-1].stVal); 
				CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-3].blVal; 
			}
        break;
      case 5: // statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 6: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 7: // statement -> while
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 8: // statement -> if
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].ifVal; }
        break;
      case 9: // statement -> proc
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].pcVal; }
        break;
      case 10: // proc -> ID, LEFTBRACKET, RIGHTBRACKET
{ CurrentSemanticValue.pcVal = new ProcedureNode(ValueStack[ValueStack.Depth-3].sVal); }
        break;
      case 11: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 12: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 13: // assign -> ident, ASSIGN, prexpr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].prVal); }
        break;
      case 14: // prexpr -> expr, GREATER, expr
{ CurrentSemanticValue.prVal = new PredicateBinaryNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, PredicateOperationType.Greater); }
        break;
      case 15: // prexpr -> expr, LESS, expr
{ CurrentSemanticValue.prVal = new PredicateBinaryNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, PredicateOperationType.Less); }
        break;
      case 16: // prexpr -> expr, EQUAL, expr
{ CurrentSemanticValue.prVal = new PredicateBinaryNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, PredicateOperationType.Equal); }
        break;
      case 17: // prexpr -> expr, NOTEQUAL, expr
{ CurrentSemanticValue.prVal = new PredicateBinaryNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, PredicateOperationType.Notequal); }
        break;
      case 18: // expr -> t
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 19: // expr -> expr, PLUS, t
{ CurrentSemanticValue.eVal = new BinaryNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OperationType.Plus); }
        break;
      case 20: // expr -> expr, MINUS, t
{ CurrentSemanticValue.eVal = new BinaryNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OperationType.Minus); }
        break;
      case 21: // t -> f
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 22: // t -> t, MULT, f
{ CurrentSemanticValue.eVal = new BinaryNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OperationType.Mult); }
        break;
      case 23: // t -> t, DIV, f
{ CurrentSemanticValue.eVal = new BinaryNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, OperationType.Div); }
        break;
      case 24: // f -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 25: // f -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 26: // f -> RNUM
{ CurrentSemanticValue.eVal = new RealNumNode(ValueStack[ValueStack.Depth-1].dVal); }
        break;
      case 27: // f -> LEFTBRACKET, expr, RIGHTBRACKET
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].eVal; }
        break;
      case 28: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 29: // while -> WHILE, prexpr, DO, statement
{ CurrentSemanticValue.stVal = new WhileNode(ValueStack[ValueStack.Depth-3].prVal, ValueStack[ValueStack.Depth-1].stVal, CycleType.WhileDo); }
        break;
      case 30: // while -> REPEAT, statement, UNTIL, prexpr
{ CurrentSemanticValue.stVal = new WhileNode(ValueStack[ValueStack.Depth-1].prVal, ValueStack[ValueStack.Depth-3].stVal, CycleType.DoUntil); }
        break;
      case 31: // if -> IF, prexpr, THEN, statement
{ CurrentSemanticValue.ifVal = new IfNode(ValueStack[ValueStack.Depth-3].prVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 32: // if -> IF, prexpr, THEN, statement, ELSE, statement
{ CurrentSemanticValue.ifVal = new IfNode(ValueStack[ValueStack.Depth-5].prVal, ValueStack[ValueStack.Depth-3].stVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
