// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  KAZANFARIO-PC
// DateTime: 26.09.2015 20:40:52
// UserName: Kazanfario
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,ASSIGN=6,
    SEMICOLON=7,PLUS=8,MINUS=9,PROD=10,DIV=11,LB=12,
    RB=13,WRITE=14,WRITELN=15,COMMA=16,IF=17,ELSE=18,
    THEN=19,WHILE=20,DO=21,REPEAT=22,UNTIL=23,LESS=24,
    MORE=25,LESSEQUAL=26,MOREEQUAL=27,EQUAL=28,NOTEQUAL=29,NOT=30,
    POINT=31,INUM=32,RNUM=33,ID=34};

public struct ValueType
{ 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
			public ExprBlockNode exblVal;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Эти объявления добавляются в класс GPPGParser, представляющий собой парсер, генерируемый системой gppg
    public BlockNode root; // Корневой узел синтаксического дерева 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[42];
  private static State[] states = new State[82];
  private static string[] nonTerms = new string[] {
      "expr", "ident", "T", "F", "U", "assign", "statement", "cycle", "if", "while", 
      "repeatuntil", "stlist", "block", "exprlist", "write", "progr", "$accept", 
      };

  static Parser() {
    states[0] = new State(new int[]{3,5},new int[]{-16,1,-13,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{31,4});
    states[4] = new State(-2);
    states[5] = new State(new int[]{34,24,3,5,5,49,14,53,15,60,17,65,20,72,22,77},new int[]{-12,6,-7,81,-6,10,-2,11,-13,47,-8,48,-15,52,-9,64,-10,71,-11,76});
    states[6] = new State(new int[]{4,7,7,8});
    states[7] = new State(-36);
    states[8] = new State(new int[]{34,24,3,5,5,49,14,53,15,60,17,65,20,72,22,77},new int[]{-7,9,-6,10,-2,11,-13,47,-8,48,-15,52,-9,64,-10,71,-11,76});
    states[9] = new State(-4);
    states[10] = new State(-5);
    states[11] = new State(new int[]{6,12});
    states[12] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,13,-3,14,-5,17,-4,20,-2,23});
    states[13] = new State(-13);
    states[14] = new State(new int[]{10,15,11,45,4,-14,7,-14,18,-14,23,-14,8,-14,9,-14,13,-14,34,-14,3,-14,5,-14,14,-14,15,-14,17,-14,20,-14,22,-14,16,-14,19,-14,21,-14});
    states[15] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,16,-3,14,-5,17,-4,20,-2,23});
    states[16] = new State(-15);
    states[17] = new State(new int[]{8,18,9,43,10,-17,11,-17,4,-17,7,-17,18,-17,23,-17,13,-17,34,-17,3,-17,5,-17,14,-17,15,-17,17,-17,20,-17,22,-17,16,-17,19,-17,21,-17});
    states[18] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,19,-3,14,-5,17,-4,20,-2,23});
    states[19] = new State(-18);
    states[20] = new State(new int[]{24,21,25,33,26,35,27,37,28,39,29,41,8,-20,9,-20,10,-20,11,-20,4,-20,7,-20,18,-20,23,-20,13,-20,34,-20,3,-20,5,-20,14,-20,15,-20,17,-20,20,-20,22,-20,16,-20,19,-20,21,-20});
    states[21] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,22,-3,14,-5,17,-4,20,-2,23});
    states[22] = new State(-21);
    states[23] = new State(-28);
    states[24] = new State(-12);
    states[25] = new State(new int[]{32,26});
    states[26] = new State(-29);
    states[27] = new State(-30);
    states[28] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,29,-3,14,-5,17,-4,20,-2,23});
    states[29] = new State(new int[]{13,30});
    states[30] = new State(-31);
    states[31] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,32,-3,14,-5,17,-4,20,-2,23});
    states[32] = new State(-27);
    states[33] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,34,-3,14,-5,17,-4,20,-2,23});
    states[34] = new State(-22);
    states[35] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,36,-3,14,-5,17,-4,20,-2,23});
    states[36] = new State(-23);
    states[37] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,38,-3,14,-5,17,-4,20,-2,23});
    states[38] = new State(-24);
    states[39] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,40,-3,14,-5,17,-4,20,-2,23});
    states[40] = new State(-25);
    states[41] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,42,-3,14,-5,17,-4,20,-2,23});
    states[42] = new State(-26);
    states[43] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,44,-3,14,-5,17,-4,20,-2,23});
    states[44] = new State(-19);
    states[45] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,46,-3,14,-5,17,-4,20,-2,23});
    states[46] = new State(-16);
    states[47] = new State(-6);
    states[48] = new State(-7);
    states[49] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,50,-3,14,-5,17,-4,20,-2,23});
    states[50] = new State(new int[]{34,24,3,5,5,49,14,53,15,60,17,65,20,72,22,77},new int[]{-7,51,-6,10,-2,11,-13,47,-8,48,-15,52,-9,64,-10,71,-11,76});
    states[51] = new State(-37);
    states[52] = new State(-8);
    states[53] = new State(new int[]{12,54});
    states[54] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-14,55,-1,59,-3,14,-5,17,-4,20,-2,23});
    states[55] = new State(new int[]{13,56,16,57});
    states[56] = new State(-32);
    states[57] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,58,-3,14,-5,17,-4,20,-2,23});
    states[58] = new State(-35);
    states[59] = new State(-34);
    states[60] = new State(new int[]{12,61});
    states[61] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-14,62,-1,59,-3,14,-5,17,-4,20,-2,23});
    states[62] = new State(new int[]{13,63,16,57});
    states[63] = new State(-33);
    states[64] = new State(-9);
    states[65] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,66,-3,14,-5,17,-4,20,-2,23});
    states[66] = new State(new int[]{19,67});
    states[67] = new State(new int[]{34,24,3,5,5,49,14,53,15,60,17,65,20,72,22,77},new int[]{-7,68,-6,10,-2,11,-13,47,-8,48,-15,52,-9,64,-10,71,-11,76});
    states[68] = new State(new int[]{18,69,4,-39,7,-39,23,-39});
    states[69] = new State(new int[]{34,24,3,5,5,49,14,53,15,60,17,65,20,72,22,77},new int[]{-7,70,-6,10,-2,11,-13,47,-8,48,-15,52,-9,64,-10,71,-11,76});
    states[70] = new State(-38);
    states[71] = new State(-10);
    states[72] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,73,-3,14,-5,17,-4,20,-2,23});
    states[73] = new State(new int[]{21,74});
    states[74] = new State(new int[]{34,24,3,5,5,49,14,53,15,60,17,65,20,72,22,77},new int[]{-7,75,-6,10,-2,11,-13,47,-8,48,-15,52,-9,64,-10,71,-11,76});
    states[75] = new State(-40);
    states[76] = new State(-11);
    states[77] = new State(new int[]{34,24,3,5,5,49,14,53,15,60,17,65,20,72,22,77},new int[]{-7,78,-6,10,-2,11,-13,47,-8,48,-15,52,-9,64,-10,71,-11,76});
    states[78] = new State(new int[]{23,79});
    states[79] = new State(new int[]{34,24,9,25,32,27,12,28,30,31},new int[]{-1,80,-3,14,-5,17,-4,20,-2,23});
    states[80] = new State(-41);
    states[81] = new State(-3);

    rules[1] = new Rule(-17, new int[]{-16,2});
    rules[2] = new Rule(-16, new int[]{-13,31});
    rules[3] = new Rule(-12, new int[]{-7});
    rules[4] = new Rule(-12, new int[]{-12,7,-7});
    rules[5] = new Rule(-7, new int[]{-6});
    rules[6] = new Rule(-7, new int[]{-13});
    rules[7] = new Rule(-7, new int[]{-8});
    rules[8] = new Rule(-7, new int[]{-15});
    rules[9] = new Rule(-7, new int[]{-9});
    rules[10] = new Rule(-7, new int[]{-10});
    rules[11] = new Rule(-7, new int[]{-11});
    rules[12] = new Rule(-2, new int[]{34});
    rules[13] = new Rule(-6, new int[]{-2,6,-1});
    rules[14] = new Rule(-1, new int[]{-3});
    rules[15] = new Rule(-1, new int[]{-3,10,-1});
    rules[16] = new Rule(-1, new int[]{-3,11,-1});
    rules[17] = new Rule(-3, new int[]{-5});
    rules[18] = new Rule(-3, new int[]{-5,8,-1});
    rules[19] = new Rule(-3, new int[]{-5,9,-1});
    rules[20] = new Rule(-5, new int[]{-4});
    rules[21] = new Rule(-5, new int[]{-4,24,-1});
    rules[22] = new Rule(-5, new int[]{-4,25,-1});
    rules[23] = new Rule(-5, new int[]{-4,26,-1});
    rules[24] = new Rule(-5, new int[]{-4,27,-1});
    rules[25] = new Rule(-5, new int[]{-4,28,-1});
    rules[26] = new Rule(-5, new int[]{-4,29,-1});
    rules[27] = new Rule(-5, new int[]{30,-1});
    rules[28] = new Rule(-4, new int[]{-2});
    rules[29] = new Rule(-4, new int[]{9,32});
    rules[30] = new Rule(-4, new int[]{32});
    rules[31] = new Rule(-4, new int[]{12,-1,13});
    rules[32] = new Rule(-15, new int[]{14,12,-14,13});
    rules[33] = new Rule(-15, new int[]{15,12,-14,13});
    rules[34] = new Rule(-14, new int[]{-1});
    rules[35] = new Rule(-14, new int[]{-14,16,-1});
    rules[36] = new Rule(-13, new int[]{3,-12,4});
    rules[37] = new Rule(-8, new int[]{5,-1,-7});
    rules[38] = new Rule(-9, new int[]{17,-1,19,-7,18,-7});
    rules[39] = new Rule(-9, new int[]{17,-1,19,-7});
    rules[40] = new Rule(-10, new int[]{20,-1,21,-7});
    rules[41] = new Rule(-11, new int[]{22,-7,23,-1});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> block, POINT
{ root = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 3: // stlist -> statement
{ 
				CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal); 
			}
        break;
      case 4: // stlist -> stlist, SEMICOLON, statement
{ 
				ValueStack[ValueStack.Depth-3].blVal.Add(ValueStack[ValueStack.Depth-1].stVal); 
				CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-3].blVal; 
			}
        break;
      case 5: // statement -> assign
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 6: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 7: // statement -> cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 8: // statement -> write
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].exblVal; }
        break;
      case 9: // statement -> if
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 10: // statement -> while
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 11: // statement -> repeatuntil
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 12: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 13: // assign -> ident, ASSIGN, expr
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].eVal); }
        break;
      case 14: // expr -> T
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 15: // expr -> T, PROD, expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, "*"); }
        break;
      case 16: // expr -> T, DIV, expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, "/"); }
        break;
      case 17: // T -> U
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 18: // T -> U, PLUS, expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, "+"); }
        break;
      case 19: // T -> U, MINUS, expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, "-"); }
        break;
      case 20: // U -> F
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal; }
        break;
      case 21: // U -> F, LESS, expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, "<"); }
        break;
      case 22: // U -> F, MORE, expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, ">"); }
        break;
      case 23: // U -> F, LESSEQUAL, expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, "<="); }
        break;
      case 24: // U -> F, MOREEQUAL, expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, ">="); }
        break;
      case 25: // U -> F, EQUAL, expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, "=="); }
        break;
      case 26: // U -> F, NOTEQUAL, expr
{ CurrentSemanticValue.eVal = new BinOpNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].eVal, "!="); }
        break;
      case 27: // U -> NOT, expr
{ CurrentSemanticValue.eVal = new UnOpNode(ValueStack[ValueStack.Depth-1].eVal, "!"); }
        break;
      case 28: // F -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 29: // F -> MINUS, INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 30: // F -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 31: // F -> LB, expr, RB
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].eVal; }
        break;
      case 32: // write -> WRITE, LB, exprlist, RB
{ CurrentSemanticValue.exblVal = ValueStack[ValueStack.Depth-2].exblVal; }
        break;
      case 33: // write -> WRITELN, LB, exprlist, RB
{ CurrentSemanticValue.exblVal = ValueStack[ValueStack.Depth-2].exblVal; }
        break;
      case 34: // exprlist -> expr
{ 
				CurrentSemanticValue.exblVal = new ExprBlockNode(ValueStack[ValueStack.Depth-1].eVal); 
			}
        break;
      case 35: // exprlist -> exprlist, COMMA, expr
{ 
					ValueStack[ValueStack.Depth-3].exblVal.Add(ValueStack[ValueStack.Depth-1].eVal); 
					CurrentSemanticValue.exblVal = ValueStack[ValueStack.Depth-3].exblVal; 
				}
        break;
      case 36: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 37: // cycle -> CYCLE, expr, statement
{ CurrentSemanticValue.stVal = new CycleNode(ValueStack[ValueStack.Depth-2].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 38: // if -> IF, expr, THEN, statement, ELSE, statement
{ CurrentSemanticValue.stVal = new IfNode(ValueStack[ValueStack.Depth-5].eVal, ValueStack[ValueStack.Depth-3].stVal, new ElseNode(ValueStack[ValueStack.Depth-1].stVal)); }
        break;
      case 39: // if -> IF, expr, THEN, statement
{ CurrentSemanticValue.stVal = new IfNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal, new ElseNode()); }
        break;
      case 40: // while -> WHILE, expr, DO, statement
{ CurrentSemanticValue.stVal = new WhileNode(ValueStack[ValueStack.Depth-3].eVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 41: // repeatuntil -> REPEAT, statement, UNTIL, expr
{ CurrentSemanticValue.stVal = new RepeatUntilNode(ValueStack[ValueStack.Depth-1].eVal, ValueStack[ValueStack.Depth-3].stVal); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
