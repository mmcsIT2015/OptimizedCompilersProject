
// ==========================================================================
//  GPPG error listing for yacc source file <SimpleYacc.y>
// ==========================================================================
//  Version:  1.3.6
//  Machine:  KAZANFARIO-PC
//  DateTime: 20.09.2015 14:15:05
//  UserName: Kazanfario
// ==========================================================================


%{
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public BlockNode root; // Êîðíåâîé óçåë ñèíòàêñè÷åñêîãî äåðåâà 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
%}

%output = SimpleYacc.cs

%union { 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
			public ExprBlockNode exblVal;
       }

%using ProgramTree;

%namespace SimpleParser

%token BEGIN END CYCLE ASSIGN SEMICOLON PLUS MINUS PROD DIV LB RB WRITE COMMA
%token <iVal> INUM 
%token <dVal> RNUM 
%token <sVal> ID

%type <eVal> expr ident T F
%type <stVal> assign statement cycle
%type <blVal> stlist block
%type <exblVal>  exprlist write

%%

progr   : block { root = $1; }
		;

stlist	: statement 
			{ 
				$$ = new BlockNode($1); 
			}
		| stlist SEMICOLON statement 
			{ 
				$1.Add($3); 
				$$ = $1; 
			}
		;

statement: assign { $$ = $1; }
		| block   { $$ = $1; }
		| cycle   { $$ = $1; }
		| write   { $$ = $1; }
	;

ident 	: ID { $$ = new IdNode($1); }	
		;
	
assign 	: ident ASSIGN expr { $$ = new AssignNode($1 as IdNode, $3); }
		;

expr	: T { $$ = $1; }
		| T PROD expr { $$ = new BinOpNode($1, $3, '*'); }
		| T DIV expr { $$ = new BinOpNode($1, $3, '/'); }
		;

T 		: F { $$ = $1; }
		| F PLUS expr { $$ = new BinOpNode($1, $3, '+'); }
		| F MINUS expr { $$ = new BinOpNode($1, $3, '-'); }
		;

F       : ident  { $$ = $1 as IdNode; }
		| INUM { $$ = new IntNumNode($1); }
		| LB expr RB { $$ = $2; }
		;
				
write	: WRITE LB exprlist RB { $$ = $3; }

exprlist	: expr 
//^^^^^^
// Error: Syntax error, unexpected anchoredSymbol
// ----------------------------------------------
			{ 
				$$ = new ExprBlockNode($1); 
			}
			| exprlist COMMA expr 
				{ 
					$1.Add($3); 
					$$ = $1; 
				}
			;
		
	
block	: BEGIN stlist END { $$ = $2; }
		;

cycle	: CYCLE expr statement { $$ = new CycleNode($2, $3); }
		;
	
%%

// ==========================================================================

