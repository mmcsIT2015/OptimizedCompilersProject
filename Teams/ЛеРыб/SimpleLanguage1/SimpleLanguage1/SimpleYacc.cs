// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-U94NV7T
// DateTime: 18.09.2015 22:01:33
// UserName: jedik
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using ProgramTree;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,ASSIGN=6,
    SEMICOLON=7,LEFT_R_BRACKET=8,RIGHT_R_BRACKET=9,IF=10,ELSE=11,FOR=12,
    PLUS=13,MINUS=14,MULT=15,DIV=16,MORE=17,LESS=18,
    MORE_EQUAL=19,LESS_EQUAL=20,INUM=21,RNUM=22,ID=23};

public struct ValueType
{ 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
			public BinExprNode bExprVal;
			public ConditionNode condVal;
      public ForCycleNode forVal;
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Эти объявления добавляются в класс GPPGParser, представляющий собой парсер, генерируемый системой gppg
    public BlockNode root; // Корневой узел синтаксического дерева 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[31];
  private static State[] states = new State[64];
  private static string[] nonTerms = new string[] {
      "expr", "ident", "assign", "statement", "cycle", "stlist", "block", "binmult", 
      "binsum", "bincond", "cond", "for_cycle", "progr", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-13,1,-7,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{23,20,3,4,5,40,10,46,12,54},new int[]{-6,5,-4,63,-3,8,-2,10,-7,38,-5,39,-11,45,-12,53});
    states[5] = new State(new int[]{4,6,23,20,3,4,5,40,10,46,12,54},new int[]{-4,7,-3,8,-2,10,-7,38,-5,39,-11,45,-12,53});
    states[6] = new State(-29);
    states[7] = new State(-4);
    states[8] = new State(new int[]{7,9});
    states[9] = new State(-5);
    states[10] = new State(new int[]{6,11});
    states[11] = new State(new int[]{23,20,21,21,8,22},new int[]{-10,12,-9,37,-8,30,-1,29,-2,19});
    states[12] = new State(new int[]{17,13,18,31,19,33,20,35,7,-14,9,-14});
    states[13] = new State(new int[]{23,20,21,21,8,22},new int[]{-9,14,-8,30,-1,29,-2,19});
    states[14] = new State(new int[]{13,15,14,25,17,-15,18,-15,19,-15,20,-15,7,-15,9,-15});
    states[15] = new State(new int[]{23,20,21,21,8,22},new int[]{-8,16,-1,29,-2,19});
    states[16] = new State(new int[]{15,17,16,27,13,-20,14,-20,17,-20,18,-20,19,-20,20,-20,7,-20,9,-20});
    states[17] = new State(new int[]{23,20,21,21,8,22},new int[]{-1,18,-2,19});
    states[18] = new State(-23);
    states[19] = new State(-26);
    states[20] = new State(-13);
    states[21] = new State(-27);
    states[22] = new State(new int[]{23,20,21,21,8,22},new int[]{-9,23,-8,30,-1,29,-2,19});
    states[23] = new State(new int[]{9,24,13,15,14,25});
    states[24] = new State(-28);
    states[25] = new State(new int[]{23,20,21,21,8,22},new int[]{-8,26,-1,29,-2,19});
    states[26] = new State(new int[]{15,17,16,27,13,-21,14,-21,17,-21,18,-21,19,-21,20,-21,7,-21,9,-21});
    states[27] = new State(new int[]{23,20,21,21,8,22},new int[]{-1,28,-2,19});
    states[28] = new State(-24);
    states[29] = new State(-25);
    states[30] = new State(new int[]{15,17,16,27,13,-22,14,-22,17,-22,18,-22,19,-22,20,-22,7,-22,9,-22});
    states[31] = new State(new int[]{23,20,21,21,8,22},new int[]{-9,32,-8,30,-1,29,-2,19});
    states[32] = new State(new int[]{13,15,14,25,17,-16,18,-16,19,-16,20,-16,7,-16,9,-16});
    states[33] = new State(new int[]{23,20,21,21,8,22},new int[]{-9,34,-8,30,-1,29,-2,19});
    states[34] = new State(new int[]{13,15,14,25,17,-17,18,-17,19,-17,20,-17,7,-17,9,-17});
    states[35] = new State(new int[]{23,20,21,21,8,22},new int[]{-9,36,-8,30,-1,29,-2,19});
    states[36] = new State(new int[]{13,15,14,25,17,-18,18,-18,19,-18,20,-18,7,-18,9,-18});
    states[37] = new State(new int[]{13,15,14,25,17,-19,18,-19,19,-19,20,-19,7,-19,9,-19});
    states[38] = new State(-6);
    states[39] = new State(-7);
    states[40] = new State(new int[]{8,41});
    states[41] = new State(new int[]{23,20,21,21,8,22},new int[]{-10,42,-9,37,-8,30,-1,29,-2,19});
    states[42] = new State(new int[]{9,43,17,13,18,31,19,33,20,35});
    states[43] = new State(new int[]{23,20,3,4,5,40,10,46,12,54},new int[]{-4,44,-3,8,-2,10,-7,38,-5,39,-11,45,-12,53});
    states[44] = new State(-30);
    states[45] = new State(-8);
    states[46] = new State(new int[]{8,47});
    states[47] = new State(new int[]{23,20,21,21,8,22},new int[]{-10,48,-9,37,-8,30,-1,29,-2,19});
    states[48] = new State(new int[]{9,49,17,13,18,31,19,33,20,35});
    states[49] = new State(new int[]{23,20,3,4,5,40,10,46,12,54},new int[]{-4,50,-3,8,-2,10,-7,38,-5,39,-11,45,-12,53});
    states[50] = new State(new int[]{11,51,4,-12,23,-12,3,-12,5,-12,10,-12,12,-12});
    states[51] = new State(new int[]{23,20,3,4,5,40,10,46,12,54},new int[]{-4,52,-3,8,-2,10,-7,38,-5,39,-11,45,-12,53});
    states[52] = new State(-11);
    states[53] = new State(-9);
    states[54] = new State(new int[]{8,55});
    states[55] = new State(new int[]{23,20},new int[]{-3,56,-2,10});
    states[56] = new State(new int[]{7,57});
    states[57] = new State(new int[]{23,20,21,21,8,22},new int[]{-10,58,-9,37,-8,30,-1,29,-2,19});
    states[58] = new State(new int[]{7,59,17,13,18,31,19,33,20,35});
    states[59] = new State(new int[]{23,20},new int[]{-3,60,-2,10});
    states[60] = new State(new int[]{9,61});
    states[61] = new State(new int[]{23,20,3,4,5,40,10,46,12,54},new int[]{-4,62,-3,8,-2,10,-7,38,-5,39,-11,45,-12,53});
    states[62] = new State(-10);
    states[63] = new State(-3);

    rules[1] = new Rule(-14, new int[]{-13,2});
    rules[2] = new Rule(-13, new int[]{-7});
    rules[3] = new Rule(-6, new int[]{-4});
    rules[4] = new Rule(-6, new int[]{-6,-4});
    rules[5] = new Rule(-4, new int[]{-3,7});
    rules[6] = new Rule(-4, new int[]{-7});
    rules[7] = new Rule(-4, new int[]{-5});
    rules[8] = new Rule(-4, new int[]{-11});
    rules[9] = new Rule(-4, new int[]{-12});
    rules[10] = new Rule(-12, new int[]{12,8,-3,7,-10,7,-3,9,-4});
    rules[11] = new Rule(-11, new int[]{10,8,-10,9,-4,11,-4});
    rules[12] = new Rule(-11, new int[]{10,8,-10,9,-4});
    rules[13] = new Rule(-2, new int[]{23});
    rules[14] = new Rule(-3, new int[]{-2,6,-10});
    rules[15] = new Rule(-10, new int[]{-10,17,-9});
    rules[16] = new Rule(-10, new int[]{-10,18,-9});
    rules[17] = new Rule(-10, new int[]{-10,19,-9});
    rules[18] = new Rule(-10, new int[]{-10,20,-9});
    rules[19] = new Rule(-10, new int[]{-9});
    rules[20] = new Rule(-9, new int[]{-9,13,-8});
    rules[21] = new Rule(-9, new int[]{-9,14,-8});
    rules[22] = new Rule(-9, new int[]{-8});
    rules[23] = new Rule(-8, new int[]{-8,15,-1});
    rules[24] = new Rule(-8, new int[]{-8,16,-1});
    rules[25] = new Rule(-8, new int[]{-1});
    rules[26] = new Rule(-1, new int[]{-2});
    rules[27] = new Rule(-1, new int[]{21});
    rules[28] = new Rule(-1, new int[]{8,-9,9});
    rules[29] = new Rule(-7, new int[]{3,-6,4});
    rules[30] = new Rule(-5, new int[]{5,8,-10,9,-4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // progr -> block
{ root = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 3: // stlist -> statement
{ 
				CurrentSemanticValue.blVal = new BlockNode(ValueStack[ValueStack.Depth-1].stVal); 
			}
        break;
      case 4: // stlist -> stlist, statement
{ 
				ValueStack[ValueStack.Depth-2].blVal.Add(ValueStack[ValueStack.Depth-1].stVal); 
				CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; 
			}
        break;
      case 5: // statement -> assign, SEMICOLON
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-2].stVal; }
        break;
      case 6: // statement -> block
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].blVal; }
        break;
      case 7: // statement -> cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].stVal; }
        break;
      case 8: // statement -> cond
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].condVal as StatementNode; }
        break;
      case 9: // statement -> for_cycle
{ CurrentSemanticValue.stVal = ValueStack[ValueStack.Depth-1].forVal as StatementNode; }
        break;
      case 10: // for_cycle -> FOR, LEFT_R_BRACKET, assign, SEMICOLON, bincond, SEMICOLON, assign, 
               //              RIGHT_R_BRACKET, statement
{ CurrentSemanticValue.forVal = new ForCycleNode(ValueStack[ValueStack.Depth-7].stVal as AssignNode, ValueStack[ValueStack.Depth-5].bExprVal, ValueStack[ValueStack.Depth-3].stVal as AssignNode, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 11: // cond -> IF, LEFT_R_BRACKET, bincond, RIGHT_R_BRACKET, statement, ELSE, 
               //         statement
{ CurrentSemanticValue.condVal = new ConditionNode(ValueStack[ValueStack.Depth-5].bExprVal, ValueStack[ValueStack.Depth-3].stVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
      case 12: // cond -> IF, LEFT_R_BRACKET, bincond, RIGHT_R_BRACKET, statement
{ CurrentSemanticValue.condVal = new ConditionNode(ValueStack[ValueStack.Depth-3].bExprVal, ValueStack[ValueStack.Depth-1].stVal, null); }
        break;
      case 13: // ident -> ID
{ CurrentSemanticValue.eVal = new IdNode(ValueStack[ValueStack.Depth-1].sVal); }
        break;
      case 14: // assign -> ident, ASSIGN, bincond
{ CurrentSemanticValue.stVal = new AssignNode(ValueStack[ValueStack.Depth-3].eVal as IdNode, ValueStack[ValueStack.Depth-1].bExprVal as ExprNode); }
        break;
      case 15: // bincond -> bincond, MORE, binsum
{ CurrentSemanticValue.bExprVal = new BinExprNode(ValueStack[ValueStack.Depth-3].bExprVal, ValueStack[ValueStack.Depth-1].bExprVal, OperationType.More); }
        break;
      case 16: // bincond -> bincond, LESS, binsum
{ CurrentSemanticValue.bExprVal = new BinExprNode(ValueStack[ValueStack.Depth-3].bExprVal, ValueStack[ValueStack.Depth-1].bExprVal, OperationType.Less); }
        break;
      case 17: // bincond -> bincond, MORE_EQUAL, binsum
{ CurrentSemanticValue.bExprVal = new BinExprNode(ValueStack[ValueStack.Depth-3].bExprVal, ValueStack[ValueStack.Depth-1].bExprVal, OperationType.MoreEqual); }
        break;
      case 18: // bincond -> bincond, LESS_EQUAL, binsum
{ CurrentSemanticValue.bExprVal = new BinExprNode(ValueStack[ValueStack.Depth-3].bExprVal, ValueStack[ValueStack.Depth-1].bExprVal, OperationType.LessEqual); }
        break;
      case 19: // bincond -> binsum
{ CurrentSemanticValue.bExprVal = ValueStack[ValueStack.Depth-1].bExprVal as BinExprNode; }
        break;
      case 20: // binsum -> binsum, PLUS, binmult
{ CurrentSemanticValue.bExprVal = new BinExprNode(ValueStack[ValueStack.Depth-3].bExprVal, ValueStack[ValueStack.Depth-1].bExprVal, OperationType.Plus); }
        break;
      case 21: // binsum -> binsum, MINUS, binmult
{ CurrentSemanticValue.bExprVal = new BinExprNode(ValueStack[ValueStack.Depth-3].bExprVal, ValueStack[ValueStack.Depth-1].bExprVal, OperationType.Minus); }
        break;
      case 22: // binsum -> binmult
{ CurrentSemanticValue.bExprVal = ValueStack[ValueStack.Depth-1].bExprVal as BinExprNode; }
        break;
      case 23: // binmult -> binmult, MULT, expr
{ CurrentSemanticValue.bExprVal = new BinExprNode(ValueStack[ValueStack.Depth-3].bExprVal, ValueStack[ValueStack.Depth-1].eVal, OperationType.Mult); }
        break;
      case 24: // binmult -> binmult, DIV, expr
{ CurrentSemanticValue.bExprVal = new BinExprNode(ValueStack[ValueStack.Depth-3].bExprVal, ValueStack[ValueStack.Depth-1].eVal, OperationType.Div); }
        break;
      case 25: // binmult -> expr
{ CurrentSemanticValue.bExprVal = ValueStack[ValueStack.Depth-1].eVal as BinExprNode; }
        break;
      case 26: // expr -> ident
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-1].eVal as IdNode; }
        break;
      case 27: // expr -> INUM
{ CurrentSemanticValue.eVal = new IntNumNode(ValueStack[ValueStack.Depth-1].iVal); }
        break;
      case 28: // expr -> LEFT_R_BRACKET, binsum, RIGHT_R_BRACKET
{ CurrentSemanticValue.eVal = ValueStack[ValueStack.Depth-2].bExprVal as ExprNode; }
        break;
      case 29: // block -> BEGIN, stlist, END
{ CurrentSemanticValue.blVal = ValueStack[ValueStack.Depth-2].blVal; }
        break;
      case 30: // cycle -> CYCLE, LEFT_R_BRACKET, bincond, RIGHT_R_BRACKET, statement
{ CurrentSemanticValue.stVal = new CycleNode(ValueStack[ValueStack.Depth-3].bExprVal, ValueStack[ValueStack.Depth-1].stVal); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
